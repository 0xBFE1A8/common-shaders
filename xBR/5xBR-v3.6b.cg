<html>
<head id="head"><script type="text/javascript">var NREUMQ=[];NREUMQ.push(["mark","firstbyte",new Date().getTime()]);</script>
  <title>#3611314 - Pastie</title>
	<link rel="icon" type="image/gif" href="/images/pastie.gif">
	<link rel="SHORTCUT ICON" type="image/gif" href="/images/pastie.gif">
</head>
<body>
	
<pre>
/*<br/>   Hyllian's 5xBR v3.6-semi-rounded Shader<br/>   <br/>   Copyright (C) 2011/2012 Hyllian/Jararaca - sergiogdb@gmail.com<br/><br/>   This program is free software; you can redistribute it and/or<br/>   modify it under the terms of the GNU General Public License<br/>   as published by the Free Software Foundation; either version 2<br/>   of the License, or (at your option) any later version.<br/><br/>   This program is distributed in the hope that it will be useful,<br/>   but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the<br/>   GNU General Public License for more details.<br/><br/>   You should have received a copy of the GNU General Public License<br/>   along with this program; if not, write to the Free Software<br/>   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.<br/><br/>*/<br/><br/>const static float coef           = 2.0;<br/>const static float3 dtt           = float3(65536,255,1);<br/>const static half y_weight        = 48.0;<br/>const static half u_weight        = 7.0;<br/>const static half v_weight        = 6.0;<br/>const static half3x3 yuv          = half3x3(0.299, 0.587, 0.114, -0.169, -0.331, 0.499, 0.499, -0.418, -0.0813);<br/>const static half3x3 yuv_weighted = half3x3(y_weight*yuv[0], u_weight*yuv[1], v_weight*yuv[2]);<br/><br/><br/>float4 df(float4 A, float4 B)<br/>{<br/>	return float4(abs(A-B));<br/>}<br/><br/><br/>float4 weighted_distance(float4 a, float4 b, float4 c, float4 d, float4 e, float4 f, float4 g, float4 h)<br/>{<br/>	return (df(a,b) + df(a,c) + df(d,e) + df(d,f) + 4.0*df(g,h));<br/>}<br/><br/><br/><br/>struct input<br/>{<br/>	half2 video_size;<br/>	float2 texture_size;<br/>	half2 output_size;<br/>};<br/><br/><br/>struct out_vertex {<br/>	half4 position : POSITION;<br/>	half4 color    : COLOR;<br/>	float2 texCoord : TEXCOORD0;<br/>	half4 t1 : TEXCOORD1;<br/>};<br/><br/>/*    VERTEX_SHADER    */<br/>out_vertex main_vertex<br/>(<br/>	half4 position	: POSITION,<br/>	half4 color	: COLOR,<br/>	float2 texCoord : TEXCOORD0,<br/><br/>   	uniform half4x4 modelViewProj,<br/>	uniform input IN<br/>)<br/>{<br/>	out_vertex OUT;<br/><br/>	OUT.position = mul(modelViewProj, position);<br/>	OUT.color = color;<br/><br/>	half2 ps = half2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y);<br/>	half dx = ps.x;<br/>	half dy = ps.y;<br/><br/>	OUT.texCoord = texCoord;<br/>	OUT.t1.xy = half2( dx,  0); // F<br/>	OUT.t1.zw = half2(  0, dy); // H<br/><br/>	return OUT;<br/>}<br/><br/><br/>/*    FRAGMENT SHADER    */<br/>half4 main_fragment(in out_vertex VAR, uniform sampler2D decal : TEXUNIT0, uniform input IN) : COLOR<br/>{<br/>	bool4 edr, edr_left, edr_up, px; // px = pixel, edr = edge detection rule<br/>	bool4 interp_restriction_lv1, interp_restriction_lv2_left, interp_restriction_lv2_up;<br/>	bool4 nc; // new_color<br/>	bool4 fx, fx_left, fx_up; // inequations of straight lines.<br/><br/>	float2 fp = frac(VAR.texCoord*IN.texture_size);<br/><br/>	half2 dx = VAR.t1.xy;<br/>	half2 dy = VAR.t1.zw;<br/><br/>	half3 A = tex2D(decal, VAR.texCoord -dx -dy).xyz;<br/>	half3 B = tex2D(decal, VAR.texCoord     -dy).xyz;<br/>	half3 C = tex2D(decal, VAR.texCoord +dx -dy).xyz;<br/>	half3 D = tex2D(decal, VAR.texCoord -dx    ).xyz;<br/>	half3 E = tex2D(decal, VAR.texCoord        ).xyz;<br/>	half3 F = tex2D(decal, VAR.texCoord +dx    ).xyz;<br/>	half3 G = tex2D(decal, VAR.texCoord -dx +dy).xyz;<br/>	half3 H = tex2D(decal, VAR.texCoord     +dy).xyz;<br/>	half3 I = tex2D(decal, VAR.texCoord +dx +dy).xyz;<br/><br/>	half3  A1 = tex2D(decal, VAR.texCoord     -dx -2.0*dy).xyz;<br/>	half3  C1 = tex2D(decal, VAR.texCoord     +dx -2.0*dy).xyz;<br/>	half3  A0 = tex2D(decal, VAR.texCoord -2.0*dx     -dy).xyz;<br/>	half3  G0 = tex2D(decal, VAR.texCoord -2.0*dx     +dy).xyz;<br/>	half3  C4 = tex2D(decal, VAR.texCoord +2.0*dx     -dy).xyz;<br/>	half3  I4 = tex2D(decal, VAR.texCoord +2.0*dx     +dy).xyz;<br/>	half3  G5 = tex2D(decal, VAR.texCoord     -dx +2.0*dy).xyz;<br/>	half3  I5 = tex2D(decal, VAR.texCoord     +dx +2.0*dy).xyz;<br/>	half3  B1 = tex2D(decal, VAR.texCoord         -2.0*dy).xyz;<br/>	half3  D0 = tex2D(decal, VAR.texCoord -2.0*dx        ).xyz;<br/>	half3  H5 = tex2D(decal, VAR.texCoord         +2.0*dy).xyz;<br/>	half3  F4 = tex2D(decal, VAR.texCoord +2.0*dx        ).xyz;<br/><br/>	float4 b = mul( half4x3(B, D, H, F), yuv_weighted[0] );<br/>	float4 c = mul( half4x3(C, A, G, I), yuv_weighted[0] );<br/>	float4 e = mul( half4x3(E, E, E, E), yuv_weighted[0] );<br/>	float4 d = b.yzwx;<br/>	float4 f = b.wxyz;<br/>	float4 g = c.zwxy;<br/>	float4 h = b.zwxy;<br/>	float4 i = c.wxyz;<br/><br/>	float4 i4 = mul( half4x3(I4, C1, A0, G5), yuv_weighted[0] );<br/>	float4 i5 = mul( half4x3(I5, C4, A1, G0), yuv_weighted[0] );<br/>	float4 h5 = mul( half4x3(H5, F4, B1, D0), yuv_weighted[0] );<br/>	float4 f4 = h5.yzwx;<br/><br/>	float4 Ao = float4( 1.0, -1.0, -1.0, 1.0 );<br/>	float4 Bo = float4( 1.0,  1.0, -1.0,-1.0 );<br/>	float4 Co = float4( 1.5,  0.5, -0.5, 0.5 );<br/>	float4 Ax = float4( 1.0, -1.0, -1.0, 1.0 );<br/>	float4 Bx = float4( 0.5,  2.0, -0.5,-2.0 );<br/>	float4 Cx = float4( 1.0,  1.0, -0.5, 0.0 );<br/>	float4 Ay = float4( 1.0, -1.0, -1.0, 1.0 );<br/>	float4 By = float4( 2.0,  0.5, -2.0,-0.5 );<br/>	float4 Cy = float4( 2.0,  0.0, -1.0, 0.5 );<br/><br/>	// These inequations define the line below which interpolation occurs.<br/>	fx      = (Ao*fp.y+Bo*fp.x &gt; Co); <br/>	fx_left = (Ax*fp.y+Bx*fp.x &gt; Cx);<br/>	fx_up   = (Ay*fp.y+By*fp.x &gt; Cy);<br/><br/>	interp_restriction_lv1      = ((e!=f) &amp;&amp; (e!=h) &amp;&amp;  ( f!=b &amp;&amp; h!=d || e==i &amp;&amp; f!=i4 &amp;&amp; h!=i5 || e==g || e==c ) );<br/>	interp_restriction_lv2_left = ((e!=g) &amp;&amp; (d!=g));<br/>	interp_restriction_lv2_up   = ((e!=c) &amp;&amp; (b!=c));<br/><br/>	edr      = (weighted_distance( e, c, g, i, h5, f4, h, f) &lt; weighted_distance( h, d, i5, f, i4, b, e, i)) &amp;&amp; interp_restriction_lv1;<br/>	edr_left = ((coef*df(f,g)) &lt;= df(h,c)) &amp;&amp; interp_restriction_lv2_left;<br/>	edr_up   = (df(f,g) &gt;= (coef*df(h,c))) &amp;&amp; interp_restriction_lv2_up;<br/><br/>	nc = ( edr &amp;&amp; (fx || edr_left &amp;&amp; fx_left || edr_up &amp;&amp; fx_up) );<br/><br/>	px = (df(e,f) &lt;= df(e,h));<br/><br/>	half3 res = nc.x ? px.x ? F : H : nc.y ? px.y ? B : F : nc.z ? px.z ? D : B : nc.w ? px.w ? H : D : E;<br/><br/>	return half4(res, 1.0);<br/>}<br/><br/>
</pre>

<script type="text/javascript">(function(){var d=document;var e=d.createElement("script");e.async=true;e.src="https://d1ros97qkrwjf5.cloudfront.net/30/eum/rum.js";e.type="text/javascript";var s=d.getElementsByTagName("script")[0];s.parentNode.insertBefore(e,s);})();NREUMQ.push(["nrf2","beacon-1.newrelic.com","4f1b2792f0",10734,"Jw4PQUVeXVxXRR8TUBcVBEYYRVRIRg==",0,52,new Date().getTime()])</script></body>
</html>
