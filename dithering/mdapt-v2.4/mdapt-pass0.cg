/* COMPATIBILITY 
   - HLSL compilers
   - Cg   compilers
*/

/*
   Merge Dithering and Pseudo Transparency Shader v2.4 - Pass 0
   by Sp00kyFox, 2013

   Neighbor anaylsis via dot product of the difference vectors.

*/

// Uncomment the following line to activate strict pattern behavior (only allows 2 different colors).
//#define strict


#define TEX(dx,dy) tex2D(decal, VAR.texCoord+float2((dx),(dy))*VAR.t1).xyz

const static float sq3 = sqrt(3.);

struct input
{
	float2 video_size;
	float2 texture_size;
	float2 output_size;
};

struct out_vertex {
        float4 position : POSITION;
        float2 texCoord : TEXCOORD0;
        float2 t1;
};


/*    VERTEX_SHADER    */
out_vertex main_vertex
(
	float4 position	: POSITION,
	float2 texCoord : TEXCOORD0,

   	uniform float4x4 modelViewProj,
	uniform input IN
)
{
        out_vertex OUT;

        OUT.position = mul(modelViewProj, position);

        float2 ps = float2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y);
        float dx  = ps.x;
        float dy  = ps.y;

        OUT.texCoord = texCoord;
        OUT.t1       = float2(dx, dy); // F H

        return OUT;
}

/*    FRAGMENT SHADER    */
float4 main_fragment(in out_vertex VAR, uniform sampler2D decal : TEXUNIT0, uniform input IN) : COLOR
{
	/*
		  U
		L C R
		  D	
	*/


	float3 C = TEX( 0, 0);
	float3 R = TEX( 1, 0);
	float3 L = TEX(-1, 0);
	float3 D = TEX( 0, 1);
	float3 U = TEX( 0,-1);

	float3 CsL = C-L, CsR = C-R, CsD = C-D, CsU = C-U;
	float  lLsR = length(L-R), lUsD = length(U-D);

	float r = dot(CsL, CsR) * (sq3 - lLsR) / (length(CsL)*length(CsR)*sq3);
	float g = dot(CsU, CsD) * (sq3 - lUsD) / (length(CsU)*length(CsD)*sq3);

#ifdef strict

	r *= lLsR == 0;
	g *= lUsD == 0;

#endif

	return float4(r, g, min(r,g), max(r,g));
}
