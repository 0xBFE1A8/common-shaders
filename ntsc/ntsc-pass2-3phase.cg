struct data
{
   float2 tex;
   float2 pix_no;
};

struct input
{
   float2 video_size;
   float2 texture_size;
   float2 output_size;
   float frame_count;
};

void main_vertex
(
   float4 position : POSITION,
   out float4 oPosition : POSITION,
   uniform float4x4 modelViewProj,
   float2 tex : TEXCOORD,
   uniform input IN,
   out data oData
)
{
   oPosition = mul(modelViewProj, position);
   oData.tex = tex;
   oData.pix_no = tex * IN.texture_size;
}

#define TAPS 16
const float filter[TAPS + 1] = float[TAPS + 1](
      -0.0000, 0.0000, 0.0005, -0.0007, -0.0013, 0.0036, -0.0000,
      -0.0093, 0.0086, 0.0126, -0.0293, 0.0000,
      0.0597, -0.0546, -0.0882, 0.2983, 0.6000
      );

#define fetch_offset(offset, one_x) \
   tex2D(s0, vertex.tex + float2((offset) * (one_x), 0.0)).xyz

#define PI 3.14159265
#define CHROMA_MOD_FREQ (PI / 3.0)

#define SATURATION 1.0
#define BRIGHTNESS 1.0
#define ARTIFACTING 1.0
#define FRINGING 1.0
#define chroma_mod (2.0 * SATURATION)

const float3x3 mix_mat = float3x3(
      BRIGHTNESS, ARTIFACTING, ARTIFACTING,
      FRINGING, chroma_mod, 0.0,
      FRINGING, 0.0, chroma_mod
);

float4 main_fragment (uniform input IN, in data vertex, uniform sampler2D s0 : TEXUNIT0) : COLOR
{
   float one_x = 1.0 / IN.texture_size.x;
   float chroma_phase = 0.6667 * PI * (mod(vertex.pix_no.y, 3.0) + IN.frame_count);
   float mod_phase = chroma_phase + vertex.pix_no.x * CHROMA_MOD_FREQ;

   float3 signal = float3(0.0);
   for (int i = 0; i < TAPS; i++)
   {
      float offset = float(i);
      float3 sums =
         fetch_offset(offset - float(TAPS), one_x) +
         fetch_offset(float(TAPS) - offset, one_x);

      signal += sums * filter[i];
   }
   signal += tex2D(s0, vertex.tex).xyz * filter[TAPS];
   signal = mul(mix_mat, signal);

   float i_mod = cos(mod_phase);
   float q_mod = sin(mod_phase);

   signal.yz *= float2(i_mod, q_mod);
   return float4(signal, 1.0);
}

