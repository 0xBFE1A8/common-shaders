struct data
{
   float2 tex;
   float2 pix_no;
};

struct input
{
   float2 video_size;
   float2 texture_size;
   float2 output_size;
   float frame_count;
};

void main_vertex
(
   float4 position : POSITION,
   out float4 oPosition : POSITION,
   uniform float4x4 modelViewProj,
   float2 tex : TEXCOORD,
   uniform input IN,
   out data oData
)
{
   oPosition = mul(modelViewProj, position);
   oData.tex = tex;
   oData.pix_no = tex * IN.texture_size;
}

#define TAPS 16
// fir1(32, 0.20, kaiser(33, 6))
const float luma_filter[TAPS + 1] = float[TAPS + 1](
      -0.0002, 0.0000, 0.0009, 0.0026, 0.0041, 0.0039, -0.0000, -0.0081,
      -0.0183, -0.0250, -0.0209, 0.0000, 0.0393,
      0.0916, 0.1450, 0.1851, 0.2000
      );

// fir1(32, 0.12, kaiser(33, 6))
const float chroma_filter[TAPS + 1] = float[TAPS + 1](
      -0.0001, -0.0005, -0.0013, -0.0026, -0.0043, -0.0056, -0.0057, -0.0034,
      0.0024, 0.0127, 0.0275, 0.0461, 0.0669,
      0.0873, 0.1045, 0.01161, 0.1202
      );

const float3x3 yiq2rgb_mat = float3x3(
   1.0, 0.956, 0.6210,
   1.0, -0.2720, -0.6474,
   1.0, -1.1060, 1.7046);

float3 yiq2rgb(float3 yiq)
{
   return mul(yiq2rgb_mat, yiq);
}

#define fetch_offset(offset, one_x) \
   tex2D(s0, vertex.tex + float2((offset) * (one_x), 0.0)).xyz

float4 main_fragment (uniform input IN, in data vertex, uniform sampler2D s0 : TEXUNIT0) : COLOR
{
   float one_x = 1.0 / IN.texture_size.x;
   float3 signal = float3(0.0);
   for (int i = 0; i < TAPS; i++)
   {
      float offset = float(i);

      float3 sums = fetch_offset(offset - float(TAPS), one_x) +
         fetch_offset(float(TAPS) - offset, one_x);

      signal += sums * float3(luma_filter[i], chroma_filter[i], chroma_filter[i]);
   }
   signal += tex2D(s0, vertex.tex).xyz *
      float3(luma_filter[TAPS], chroma_filter[TAPS], chroma_filter[TAPS]);

   float3 rgb = yiq2rgb(signal);
   return float4(rgb, 1.0);
}

