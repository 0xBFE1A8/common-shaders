#pragma parameter XBR_BILINEAR "Xbr - Bilinear Weight p0" 0.0 0.0 3.0 0.1
#ifdef PARAMETER_UNIFORM
uniform float XBR_BILINEAR;
#else
#define XBR_BILINEAR 0.0
#endif
// END PARAMETERS //

/* COMPATIBILITY
   - HLSL compilers
   - Cg   compilers
*/

/*
   Hyllian' Super XBR Shader - pass0
   
   Copyright (C) 2015           Hyllian - sergiogdb@gmail.com

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/

#define halfpi  1.5707963267948966192313216916398
#define pi    3.1415926535897932384626433832795
#define wa    (0.000001*pi)
#define wb    (0.8486*pi)

const static float s2 = 1.4142135623730950488016887242097;

const static float3 Y = float3(.2126, .7152, .0722);

float RGBtoYUV(float3 color)
{
  return dot(color, Y);
}

float df(float A, float B)
{
  return abs(A-B);
}

float weighted_distance(float a, float b, float c, float d, float e, float f, float g, float h)
{
  return (df(a,b) + df(a,c) + df(d,e) + df(d,f) + 4.0*df(g,h));
}

float4 resampler(float4 x)
{
  float4 res;

  res = (x==float4(0.0, 0.0, 0.0, 0.0)) ?  float4(wa*wb)  :  sin(x*wa)*sin(x*wb)/(x*x);

  return res;
}

     
    struct input
    {
        float2 video_size;
        float2 texture_size;
        float2 output_size;
        float  frame_count;
        float  frame_direction;
        float frame_rotation;
    };
     
     
    struct out_vertex {
        float4 position : POSITION;
        float4 color    : COLOR;
        float2 texCoord : TEXCOORD0;
    };
     
    /*    VERTEX_SHADER    */
    out_vertex main_vertex
    (
        float4 position    : POSITION,
        float4 color    : COLOR,
        float2 texCoord1   : TEXCOORD0,
     
        uniform float4x4 modelViewProj,
        uniform input IN
    )
    {

	float2 tex = texCoord1;

        out_vertex OUT = {
            mul(modelViewProj, position),
            color,
            tex
        };
     
        return OUT;
    }
     
     
    float4 main_fragment(in out_vertex VAR, uniform sampler2D s0 : TEXUNIT0, uniform input IN) : COLOR
    {
	//Skip pixels on wrong grid
 	if (any(frac(VAR.texCoord*IN.texture_size)<float2(0.5))) return tex2D(s0, VAR.texCoord);

	float2 g1 = float2(1.0/IN.texture_size.x, 0.0);
	float2 g2 = float2(0.0, 1.0/IN.texture_size.y);

/*

      P0|B |C |P1
     |D |E |F |F4|
     |G |H |I |I4|
      P2|H5|I5|P3

*/

	float3 P0 = tex2D(s0, VAR.texCoord     -g1    -g2).xyz;
	float3 P1 = tex2D(s0, VAR.texCoord +2.0*g1    -g2).xyz;
	float3 P2 = tex2D(s0, VAR.texCoord     -g1+2.0*g2).xyz;
	float3 P3 = tex2D(s0, VAR.texCoord +2.0*g1+2.0*g2).xyz;

	float3  B = tex2D(s0, VAR.texCoord    -g2).xyz;
	float3  C = tex2D(s0, VAR.texCoord +g1-g2).xyz;
	float3  D = tex2D(s0, VAR.texCoord -g1   ).xyz;
	float3  E = tex2D(s0, VAR.texCoord       ).xyz;
	float3  F = tex2D(s0, VAR.texCoord +g1   ).xyz;
	float3  G = tex2D(s0, VAR.texCoord -g1+g2).xyz;
	float3  H = tex2D(s0, VAR.texCoord    +g2).xyz;
	float3  I = tex2D(s0, VAR.texCoord +g1+g2).xyz;

	float3 F4 = tex2D(s0,VAR.texCoord    +2.0*g1   ).xyz;
	float3 I4 = tex2D(s0,VAR.texCoord +g2+2.0*g1   ).xyz;
	float3 H5 = tex2D(s0,VAR.texCoord +2.0*g2      ).xyz;
	float3 I5 = tex2D(s0,VAR.texCoord +2.0*g2+g1   ).xyz;

	float b = RGBtoYUV( B );
	float c = RGBtoYUV( C );
	float d = RGBtoYUV( D );
	float e = RGBtoYUV( E );
	float f = RGBtoYUV( F );
	float g = RGBtoYUV( G );
	float h = RGBtoYUV( H );
	float i = RGBtoYUV( I );

	float i4 = RGBtoYUV( I4 );
	float i5 = RGBtoYUV( I5 );
	float h5 = RGBtoYUV( H5 );
	float f4 = RGBtoYUV( F4 );

	float edr = (weighted_distance( e, c, g, i, h5, f4, h, f) - weighted_distance( h, d, i5, f, i4, b, e, i));

	float limits = XBR_BILINEAR + 0.000001;
	float a = smoothstep(-limits, limits, edr);

	float4 weights = resampler(float4(1.5*s2, 0.5*s2, 0.5*s2, 1.5*s2)); 
        float3 c1 = mul(weights, float4x3(P2, H, F, P1));
        float3 c2 = mul(weights, float4x3(P0, E, I, P3));
	c1 = c1/dot(weights, float4(1));
	c2 = c2/dot(weights, float4(1));

	// Anti-ringing
	c1 = clamp(c1, min(H, F), max(H, F));
	c2 = clamp(c2, min(E, I), max(E, I));

	float3 color =  lerp(c1, c2, a);

	return float4(color, 1.0);	
}
