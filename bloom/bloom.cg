void main_vertex
(
	float4 position : POSITION,
	float4 color    : COLOR,
	float2 texCoord : TEXCOORD0,

   uniform float4x4 modelViewProj,

	out float4 oPosition : POSITION,
	out float2 otexCoord : TEXCOORD
)
{
	oPosition = mul(modelViewProj, position);
	otexCoord = texCoord;
}

struct input
{
   float2 video_size;
   float2 texture_size;
   float2 output_size;
   float  frame_count;
   float  frame_direction;
   float  frame_rotation;
};

float luma(float3 col)
{
   return dot(col, float3(0.29, 0.70, 0.11));
}

float4 main_fragment(float2 tex : TEXCOORD0, uniform sampler2D s0 : TEXUNIT0, uniform input IN) : COLOR
{
   float3 orig_col = tex2D(s0, tex).rgb;
   
   float bloom = 0.0;

   // Blur over lower miplevels.
#define mip 1.0
#define kernel(x, y) exp(-dot(float2(x, y), float2(x, y)))
   bloom += kernel( 1,  1) * luma(tex2Dlod(s0, float4(tex, 0.0, mip), int2( 1,  1)).rgb);
   bloom += kernel( 0,  1) * luma(tex2Dlod(s0, float4(tex, 0.0, mip), int2( 0,  1)).rgb);
   bloom += kernel(-1,  1) * luma(tex2Dlod(s0, float4(tex, 0.0, mip), int2(-1,  1)).rgb);

   bloom += kernel( 1,  0) * luma(tex2Dlod(s0, float4(tex, 0.0, mip), int2( 1,  0)).rgb);
   bloom += kernel( 0,  0) * luma(tex2Dlod(s0, float4(tex, 0.0, mip), int2( 0,  0)).rgb);
   bloom += kernel(-1,  0) * luma(tex2Dlod(s0, float4(tex, 0.0, mip), int2(-1,  0)).rgb);

   bloom += kernel( 1, -1) * luma(tex2Dlod(s0, float4(tex, 0.0, mip), int2( 1, -1)).rgb);
   bloom += kernel( 0, -1) * luma(tex2Dlod(s0, float4(tex, 0.0, mip), int2( 0, -1)).rgb);
   bloom += kernel(-1, -1) * luma(tex2Dlod(s0, float4(tex, 0.0, mip), int2(-1, -1)).rgb);

   float luminance = luma(tex2Dlod(s0, float4(float2(0.5), 0.0, 15.0)).rgb);
   // Compensate for blackened out regions.
   luminance *= (IN.texture_size.x * IN.texture_size.y) / (IN.video_size.x * IN.video_size.y);
   
   float avg_luminance = 0.20 + 0.80 * log(1.0 + 10.0 * luminance);

   orig_col += bloom * 0.2;
   orig_col /= avg_luminance;
   orig_col = orig_col / (1.0 + orig_col);

   return float4(pow(orig_col, 0.75), 1.0);
}

