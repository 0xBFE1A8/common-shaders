#pragma parameter box_scale "Box Scale" 4.0 1.0 10.0 1.0
#pragma parameter location "Location" 0.5 0.2 0.5 0.3
#pragma parameter in_res_x "Horiz. Input Res" 320 200 600 1.0
#pragma parameter in_res_y "Vert. Input Res" 240 120 480 1.0
#pragma parameter out_res_x "Horiz. Output Res" 1920.0 640.0 3840.0 40.0
#pragma parameter out_res_y "Vert. Output Res" 1080.0 480.0 2160.0 40.0
#pragma parameter PARAM1 "Zoom" 10.0 1.0 50.0 1.0
#pragma parameter PARAM2 "Location" 10.0 1.0 50.0 1.0
#pragma parameter PARAM3 "Speed" 1.0 0.5 5.0 0.5
#pragma parameter PARAM4 "Factor 1" 2.0 0.1 3.0 0.1
#pragma parameter PARAM5 "Factor 2" 1.0 0.1 2.0 0.1
#pragma parameter PARAM6 "Factor 3" 0.1 0.01 0.2 0.01
#pragma parameter R "Red" 0.0 0.0 1.0 0.1
#pragma parameter G "Green" 0.3 0.0 1.0 0.1
#pragma parameter B "Blue" 0.5 0.0 1.0 0.1
#ifdef PARAMETER_UNIFORM
uniform float box_scale;
uniform float location;
uniform float out_res_x;
uniform float out_res_y;
uniform float in_res_x;
uniform float in_res_y;
uniform float PARAM1;
uniform float PARAM2;
uniform float PARAM3;
uniform float PARAM4;
uniform float PARAM5;
uniform float PARAM6;
uniform float R;
uniform float G;
uniform float B;
uniform float CYCLE;
#else
#define box_scale 4.0
#define location 0.5
#define out_res_x 1920.0
#define out_res_y 1080.0
#define in_res_x 320
#define in_res_y 240
#define PARAM1 10.0
#define PARAM2 10.0
#define PARAM3 10.0
#define PARAM4 2.0
#define PARAM5 1.0
#define PARAM6 0.1
#define R 0.0
#define G 0.3
#define B 0.5
#endif
// END PARAMETERS //

// Animated Border Cg shader
// Copyright (c) 2014 Mudlord

struct input
{
   float2 video_size;
   float2 texture_size;
   float2 output_size;
   float frame_count;
   float frame_direction;
   float frame_rotation;
};

void main_vertex
(
   float4 position : POSITION,
   out float4 oPosition : POSITION,
   uniform float4x4 modelViewProj,

   float4 color : COLOR,
   out float4 oColor : COLOR,

   float2 tex : TEXCOORD,
   out float2 oTex : TEXCOORD,

   float2 tex_border : TEXCOORD1,
   out float2 otex_border : TEXCOORD1,

   uniform input IN
)
{
   oPosition = mul(modelViewProj, position);
   oColor = color;
   
   float2 out_res = float2(out_res_x, out_res_y);
   float2 corrected_size = float2(in_res_x, in_res_y) * (4.0 / box_scale);
   float2 scale = (IN.output_size / corrected_size) / box_scale;
   float2 middle = location * IN.video_size / IN.texture_size;
   float2 diff = tex.xy - middle;
   oTex = middle + diff * scale;

   middle = float2(0.49999, 0.49999);
   float2 dist = tex_border - middle;
   otex_border = middle + dist * IN.output_size / out_res;
}

float4 conv_background(float4 back, float2 coord, float frame_count)
{
   return float4(back.rgb, back.a);
}

float4 main_fragment (
   float2 tex : TEXCOORD0, float2 tex_border : TEXCOORD1,
   uniform sampler2D s0 : TEXUNIT0,
   uniform sampler2D bg,
   uniform input IN) : COLOR
{
        float2 sp = (tex.xy*(IN.texture_size.xy/IN.video_size.xy));
        float2 p = sp*PARAM1 - float2(PARAM2);
        float2 i = p;
        float c = 1.0;
        float inten = PARAM6;//0.01;
        float t = 0.01 * PARAM3 * IN.frame_count* (1.0 - (3.0 / float(0+1)));
        i = p + float2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));
        c += 1.2/length(float2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));
        c /= PARAM5;//1.5;
        c = PARAM4-sqrt(c);
	float4 color = float4(R,G,B,1.0);

	float4 mudscape = float4(float3(c*c*c*c), 9999.0) + color;
	
	float4 frame = tex2D(s0, tex);
   float4 background = conv_background(tex2D(bg, tex_border), tex_border, IN.frame_count);
   return lerp(frame, mudscape, background.a);
}
